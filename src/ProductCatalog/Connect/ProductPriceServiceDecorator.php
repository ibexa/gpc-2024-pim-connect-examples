<?php

/**
 * @copyright Copyright (C) Ibexa AS. All rights reserved.
 * @license For full copyright and license information view LICENSE file distributed with this source code.
 */
declare(strict_types=1);

namespace App\ProductCatalog\Connect;

use App\ProductCatalog\Connect\Persistence\ProductPrice\Inheritance\DomainObjectBuilderInterface;
use Ibexa\Contracts\ProductCatalog\ProductPriceServiceDecorator as AbstractProductPriceServiceDecorator;
use Ibexa\Contracts\ProductCatalog\ProductPriceServiceInterface;
use Ibexa\Contracts\ProductCatalog\ProductServiceInterface;
use Ibexa\Contracts\ProductCatalog\Values\CurrencyInterface;
use Ibexa\Contracts\ProductCatalog\Values\CustomerGroupInterface;
use Ibexa\Contracts\ProductCatalog\Values\CustomPriceAwareInterface;
use Ibexa\Contracts\ProductCatalog\Values\Price\PriceListInterface;
use Ibexa\Contracts\ProductCatalog\Values\Price\PriceQuery;
use Ibexa\Contracts\ProductCatalog\Values\PriceInterface;
use Ibexa\Contracts\ProductCatalog\Values\ProductInterface;
use Ibexa\Core\Base\Exceptions\NotFoundException;
use Ibexa\ProductCatalog\Local\Persistence\Legacy\ProductPrice\HandlerInterface;
use Ibexa\ProductCatalog\Local\Repository\Values\PriceList;

final class ProductPriceServiceDecorator extends AbstractProductPriceServiceDecorator
{
    public function __construct(
        protected ProductPriceServiceInterface $innerService,
        private ProductServiceInterface $productService,
        private HandlerInterface $handler,
        private DomainObjectBuilderInterface $domainObjectBuilder
    ) {
        parent::__construct($innerService);
    }

    public function findPricesByProductCode(string $code): PriceListInterface
    {
        $product = $this->productService->getProduct($code);

        $prices = $this->handler->findBy([
            'product_code' => $code,
            'discriminator' => 'main',
        ]);

        $results = [];
        foreach ($prices as $price) {
            $results[] = $this->domainObjectBuilder->buildDomainPriceObject($price, $product);
        }

        return new PriceList($results, count($results));
    }

    public function getPriceByProductAndCurrency(ProductInterface $product, CurrencyInterface $currency): PriceInterface
    {
        $price = $this->handler->findOneBy([
            'product_code' => $product->getCode(),
            'currency' => $currency->getId(),
        ]);
        if ($price == null) {
            throw new NotFoundException(PriceInterface::class, $product->getCode());
        }

        return $this->domainObjectBuilder->buildDomainPriceObject($price, $product);
    }

    public function getPriceById(int $id): PriceInterface
    {
        return parent::getPriceById($id); // TODO: Change the autogenerated stub
    }

    public function findPrices(?PriceQuery $query = null): PriceListInterface
    {
        return parent::findPrices($query); // TODO: Change the autogenerated stub
    }

    public function findOneForCustomerGroup(PriceInterface $price, CustomerGroupInterface $customerGroup): ?CustomPriceAwareInterface
    {
        return parent::findOneForCustomerGroup($price, $customerGroup); // TODO: Change the autogenerated stub
    }
}
